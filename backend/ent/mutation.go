// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/oreo/app/ent/district"
	"github.com/oreo/app/ent/province"
	"github.com/oreo/app/ent/student"
	"github.com/oreo/app/ent/subdistrict"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDistrict    = "District"
	TypeProvince    = "Province"
	TypeStudent     = "Student"
	TypeSubdistrict = "Subdistrict"
)

// DistrictMutation represents an operation that mutate the Districts
// nodes in the graph.
type DistrictMutation struct {
	config
	op              Op
	typ             string
	id              *int
	district        *string
	clearedFields   map[string]struct{}
	province        map[int]struct{}
	removedprovince map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*District, error)
}

var _ ent.Mutation = (*DistrictMutation)(nil)

// districtOption allows to manage the mutation configuration using functional options.
type districtOption func(*DistrictMutation)

// newDistrictMutation creates new mutation for $n.Name.
func newDistrictMutation(c config, op Op, opts ...districtOption) *DistrictMutation {
	m := &DistrictMutation{
		config:        c,
		op:            op,
		typ:           TypeDistrict,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDistrictID sets the id field of the mutation.
func withDistrictID(id int) districtOption {
	return func(m *DistrictMutation) {
		var (
			err   error
			once  sync.Once
			value *District
		)
		m.oldValue = func(ctx context.Context) (*District, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().District.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDistrict sets the old District of the mutation.
func withDistrict(node *District) districtOption {
	return func(m *DistrictMutation) {
		m.oldValue = func(context.Context) (*District, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DistrictMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DistrictMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DistrictMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDistrict sets the district field.
func (m *DistrictMutation) SetDistrict(s string) {
	m.district = &s
}

// District returns the district value in the mutation.
func (m *DistrictMutation) District() (r string, exists bool) {
	v := m.district
	if v == nil {
		return
	}
	return *v, true
}

// OldDistrict returns the old district value of the District.
// If the District object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DistrictMutation) OldDistrict(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDistrict is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDistrict requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDistrict: %w", err)
	}
	return oldValue.District, nil
}

// ResetDistrict reset all changes of the "district" field.
func (m *DistrictMutation) ResetDistrict() {
	m.district = nil
}

// AddProvinceIDs adds the province edge to Province by ids.
func (m *DistrictMutation) AddProvinceIDs(ids ...int) {
	if m.province == nil {
		m.province = make(map[int]struct{})
	}
	for i := range ids {
		m.province[ids[i]] = struct{}{}
	}
}

// RemoveProvinceIDs removes the province edge to Province by ids.
func (m *DistrictMutation) RemoveProvinceIDs(ids ...int) {
	if m.removedprovince == nil {
		m.removedprovince = make(map[int]struct{})
	}
	for i := range ids {
		m.removedprovince[ids[i]] = struct{}{}
	}
}

// RemovedProvince returns the removed ids of province.
func (m *DistrictMutation) RemovedProvinceIDs() (ids []int) {
	for id := range m.removedprovince {
		ids = append(ids, id)
	}
	return
}

// ProvinceIDs returns the province ids in the mutation.
func (m *DistrictMutation) ProvinceIDs() (ids []int) {
	for id := range m.province {
		ids = append(ids, id)
	}
	return
}

// ResetProvince reset all changes of the "province" edge.
func (m *DistrictMutation) ResetProvince() {
	m.province = nil
	m.removedprovince = nil
}

// Op returns the operation name.
func (m *DistrictMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (District).
func (m *DistrictMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DistrictMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.district != nil {
		fields = append(fields, district.FieldDistrict)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DistrictMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case district.FieldDistrict:
		return m.District()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DistrictMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case district.FieldDistrict:
		return m.OldDistrict(ctx)
	}
	return nil, fmt.Errorf("unknown District field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DistrictMutation) SetField(name string, value ent.Value) error {
	switch name {
	case district.FieldDistrict:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDistrict(v)
		return nil
	}
	return fmt.Errorf("unknown District field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DistrictMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DistrictMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DistrictMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown District numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DistrictMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DistrictMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DistrictMutation) ClearField(name string) error {
	return fmt.Errorf("unknown District nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DistrictMutation) ResetField(name string) error {
	switch name {
	case district.FieldDistrict:
		m.ResetDistrict()
		return nil
	}
	return fmt.Errorf("unknown District field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DistrictMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.province != nil {
		edges = append(edges, district.EdgeProvince)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DistrictMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case district.EdgeProvince:
		ids := make([]ent.Value, 0, len(m.province))
		for id := range m.province {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DistrictMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedprovince != nil {
		edges = append(edges, district.EdgeProvince)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DistrictMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case district.EdgeProvince:
		ids := make([]ent.Value, 0, len(m.removedprovince))
		for id := range m.removedprovince {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DistrictMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DistrictMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DistrictMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown District unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DistrictMutation) ResetEdge(name string) error {
	switch name {
	case district.EdgeProvince:
		m.ResetProvince()
		return nil
	}
	return fmt.Errorf("unknown District edge %s", name)
}

// ProvinceMutation represents an operation that mutate the Provinces
// nodes in the graph.
type ProvinceMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	clearedFields      map[string]struct{}
	district           *int
	cleareddistrict    bool
	subdistrict        *int
	clearedsubdistrict bool
	student            *int
	clearedstudent     bool
	done               bool
	oldValue           func(context.Context) (*Province, error)
}

var _ ent.Mutation = (*ProvinceMutation)(nil)

// provinceOption allows to manage the mutation configuration using functional options.
type provinceOption func(*ProvinceMutation)

// newProvinceMutation creates new mutation for $n.Name.
func newProvinceMutation(c config, op Op, opts ...provinceOption) *ProvinceMutation {
	m := &ProvinceMutation{
		config:        c,
		op:            op,
		typ:           TypeProvince,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProvinceID sets the id field of the mutation.
func withProvinceID(id int) provinceOption {
	return func(m *ProvinceMutation) {
		var (
			err   error
			once  sync.Once
			value *Province
		)
		m.oldValue = func(ctx context.Context) (*Province, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Province.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProvince sets the old Province of the mutation.
func withProvince(node *Province) provinceOption {
	return func(m *ProvinceMutation) {
		m.oldValue = func(context.Context) (*Province, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProvinceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProvinceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ProvinceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *ProvinceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *ProvinceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Province.
// If the Province object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProvinceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *ProvinceMutation) ResetName() {
	m.name = nil
}

// SetDistrictID sets the district edge to District by id.
func (m *ProvinceMutation) SetDistrictID(id int) {
	m.district = &id
}

// ClearDistrict clears the district edge to District.
func (m *ProvinceMutation) ClearDistrict() {
	m.cleareddistrict = true
}

// DistrictCleared returns if the edge district was cleared.
func (m *ProvinceMutation) DistrictCleared() bool {
	return m.cleareddistrict
}

// DistrictID returns the district id in the mutation.
func (m *ProvinceMutation) DistrictID() (id int, exists bool) {
	if m.district != nil {
		return *m.district, true
	}
	return
}

// DistrictIDs returns the district ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DistrictID instead. It exists only for internal usage by the builders.
func (m *ProvinceMutation) DistrictIDs() (ids []int) {
	if id := m.district; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDistrict reset all changes of the "district" edge.
func (m *ProvinceMutation) ResetDistrict() {
	m.district = nil
	m.cleareddistrict = false
}

// SetSubdistrictID sets the subdistrict edge to Subdistrict by id.
func (m *ProvinceMutation) SetSubdistrictID(id int) {
	m.subdistrict = &id
}

// ClearSubdistrict clears the subdistrict edge to Subdistrict.
func (m *ProvinceMutation) ClearSubdistrict() {
	m.clearedsubdistrict = true
}

// SubdistrictCleared returns if the edge subdistrict was cleared.
func (m *ProvinceMutation) SubdistrictCleared() bool {
	return m.clearedsubdistrict
}

// SubdistrictID returns the subdistrict id in the mutation.
func (m *ProvinceMutation) SubdistrictID() (id int, exists bool) {
	if m.subdistrict != nil {
		return *m.subdistrict, true
	}
	return
}

// SubdistrictIDs returns the subdistrict ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// SubdistrictID instead. It exists only for internal usage by the builders.
func (m *ProvinceMutation) SubdistrictIDs() (ids []int) {
	if id := m.subdistrict; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubdistrict reset all changes of the "subdistrict" edge.
func (m *ProvinceMutation) ResetSubdistrict() {
	m.subdistrict = nil
	m.clearedsubdistrict = false
}

// SetStudentID sets the student edge to Student by id.
func (m *ProvinceMutation) SetStudentID(id int) {
	m.student = &id
}

// ClearStudent clears the student edge to Student.
func (m *ProvinceMutation) ClearStudent() {
	m.clearedstudent = true
}

// StudentCleared returns if the edge student was cleared.
func (m *ProvinceMutation) StudentCleared() bool {
	return m.clearedstudent
}

// StudentID returns the student id in the mutation.
func (m *ProvinceMutation) StudentID() (id int, exists bool) {
	if m.student != nil {
		return *m.student, true
	}
	return
}

// StudentIDs returns the student ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// StudentID instead. It exists only for internal usage by the builders.
func (m *ProvinceMutation) StudentIDs() (ids []int) {
	if id := m.student; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStudent reset all changes of the "student" edge.
func (m *ProvinceMutation) ResetStudent() {
	m.student = nil
	m.clearedstudent = false
}

// Op returns the operation name.
func (m *ProvinceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Province).
func (m *ProvinceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ProvinceMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, province.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ProvinceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case province.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ProvinceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case province.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Province field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProvinceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case province.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Province field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ProvinceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ProvinceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProvinceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Province numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ProvinceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ProvinceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProvinceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Province nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ProvinceMutation) ResetField(name string) error {
	switch name {
	case province.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Province field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ProvinceMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.district != nil {
		edges = append(edges, province.EdgeDistrict)
	}
	if m.subdistrict != nil {
		edges = append(edges, province.EdgeSubdistrict)
	}
	if m.student != nil {
		edges = append(edges, province.EdgeStudent)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ProvinceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case province.EdgeDistrict:
		if id := m.district; id != nil {
			return []ent.Value{*id}
		}
	case province.EdgeSubdistrict:
		if id := m.subdistrict; id != nil {
			return []ent.Value{*id}
		}
	case province.EdgeStudent:
		if id := m.student; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ProvinceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ProvinceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ProvinceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareddistrict {
		edges = append(edges, province.EdgeDistrict)
	}
	if m.clearedsubdistrict {
		edges = append(edges, province.EdgeSubdistrict)
	}
	if m.clearedstudent {
		edges = append(edges, province.EdgeStudent)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ProvinceMutation) EdgeCleared(name string) bool {
	switch name {
	case province.EdgeDistrict:
		return m.cleareddistrict
	case province.EdgeSubdistrict:
		return m.clearedsubdistrict
	case province.EdgeStudent:
		return m.clearedstudent
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ProvinceMutation) ClearEdge(name string) error {
	switch name {
	case province.EdgeDistrict:
		m.ClearDistrict()
		return nil
	case province.EdgeSubdistrict:
		m.ClearSubdistrict()
		return nil
	case province.EdgeStudent:
		m.ClearStudent()
		return nil
	}
	return fmt.Errorf("unknown Province unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ProvinceMutation) ResetEdge(name string) error {
	switch name {
	case province.EdgeDistrict:
		m.ResetDistrict()
		return nil
	case province.EdgeSubdistrict:
		m.ResetSubdistrict()
		return nil
	case province.EdgeStudent:
		m.ResetStudent()
		return nil
	}
	return fmt.Errorf("unknown Province edge %s", name)
}

// StudentMutation represents an operation that mutate the Students
// nodes in the graph.
type StudentMutation struct {
	config
	op              Op
	typ             string
	id              *int
	student         *string
	clearedFields   map[string]struct{}
	province        map[int]struct{}
	removedprovince map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Student, error)
}

var _ ent.Mutation = (*StudentMutation)(nil)

// studentOption allows to manage the mutation configuration using functional options.
type studentOption func(*StudentMutation)

// newStudentMutation creates new mutation for $n.Name.
func newStudentMutation(c config, op Op, opts ...studentOption) *StudentMutation {
	m := &StudentMutation{
		config:        c,
		op:            op,
		typ:           TypeStudent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStudentID sets the id field of the mutation.
func withStudentID(id int) studentOption {
	return func(m *StudentMutation) {
		var (
			err   error
			once  sync.Once
			value *Student
		)
		m.oldValue = func(ctx context.Context) (*Student, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Student.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStudent sets the old Student of the mutation.
func withStudent(node *Student) studentOption {
	return func(m *StudentMutation) {
		m.oldValue = func(context.Context) (*Student, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StudentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StudentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *StudentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetStudent sets the student field.
func (m *StudentMutation) SetStudent(s string) {
	m.student = &s
}

// Student returns the student value in the mutation.
func (m *StudentMutation) Student() (r string, exists bool) {
	v := m.student
	if v == nil {
		return
	}
	return *v, true
}

// OldStudent returns the old student value of the Student.
// If the Student object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *StudentMutation) OldStudent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStudent is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStudent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStudent: %w", err)
	}
	return oldValue.Student, nil
}

// ResetStudent reset all changes of the "student" field.
func (m *StudentMutation) ResetStudent() {
	m.student = nil
}

// AddProvinceIDs adds the province edge to Province by ids.
func (m *StudentMutation) AddProvinceIDs(ids ...int) {
	if m.province == nil {
		m.province = make(map[int]struct{})
	}
	for i := range ids {
		m.province[ids[i]] = struct{}{}
	}
}

// RemoveProvinceIDs removes the province edge to Province by ids.
func (m *StudentMutation) RemoveProvinceIDs(ids ...int) {
	if m.removedprovince == nil {
		m.removedprovince = make(map[int]struct{})
	}
	for i := range ids {
		m.removedprovince[ids[i]] = struct{}{}
	}
}

// RemovedProvince returns the removed ids of province.
func (m *StudentMutation) RemovedProvinceIDs() (ids []int) {
	for id := range m.removedprovince {
		ids = append(ids, id)
	}
	return
}

// ProvinceIDs returns the province ids in the mutation.
func (m *StudentMutation) ProvinceIDs() (ids []int) {
	for id := range m.province {
		ids = append(ids, id)
	}
	return
}

// ResetProvince reset all changes of the "province" edge.
func (m *StudentMutation) ResetProvince() {
	m.province = nil
	m.removedprovince = nil
}

// Op returns the operation name.
func (m *StudentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Student).
func (m *StudentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *StudentMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.student != nil {
		fields = append(fields, student.FieldStudent)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *StudentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case student.FieldStudent:
		return m.Student()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *StudentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case student.FieldStudent:
		return m.OldStudent(ctx)
	}
	return nil, fmt.Errorf("unknown Student field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *StudentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case student.FieldStudent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStudent(v)
		return nil
	}
	return fmt.Errorf("unknown Student field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *StudentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *StudentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *StudentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Student numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *StudentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *StudentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *StudentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Student nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *StudentMutation) ResetField(name string) error {
	switch name {
	case student.FieldStudent:
		m.ResetStudent()
		return nil
	}
	return fmt.Errorf("unknown Student field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *StudentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.province != nil {
		edges = append(edges, student.EdgeProvince)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *StudentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case student.EdgeProvince:
		ids := make([]ent.Value, 0, len(m.province))
		for id := range m.province {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *StudentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedprovince != nil {
		edges = append(edges, student.EdgeProvince)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *StudentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case student.EdgeProvince:
		ids := make([]ent.Value, 0, len(m.removedprovince))
		for id := range m.removedprovince {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *StudentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *StudentMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *StudentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Student unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *StudentMutation) ResetEdge(name string) error {
	switch name {
	case student.EdgeProvince:
		m.ResetProvince()
		return nil
	}
	return fmt.Errorf("unknown Student edge %s", name)
}

// SubdistrictMutation represents an operation that mutate the Subdistricts
// nodes in the graph.
type SubdistrictMutation struct {
	config
	op              Op
	typ             string
	id              *int
	subdistrict     *string
	clearedFields   map[string]struct{}
	province        map[int]struct{}
	removedprovince map[int]struct{}
	done            bool
	oldValue        func(context.Context) (*Subdistrict, error)
}

var _ ent.Mutation = (*SubdistrictMutation)(nil)

// subdistrictOption allows to manage the mutation configuration using functional options.
type subdistrictOption func(*SubdistrictMutation)

// newSubdistrictMutation creates new mutation for $n.Name.
func newSubdistrictMutation(c config, op Op, opts ...subdistrictOption) *SubdistrictMutation {
	m := &SubdistrictMutation{
		config:        c,
		op:            op,
		typ:           TypeSubdistrict,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubdistrictID sets the id field of the mutation.
func withSubdistrictID(id int) subdistrictOption {
	return func(m *SubdistrictMutation) {
		var (
			err   error
			once  sync.Once
			value *Subdistrict
		)
		m.oldValue = func(ctx context.Context) (*Subdistrict, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Subdistrict.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubdistrict sets the old Subdistrict of the mutation.
func withSubdistrict(node *Subdistrict) subdistrictOption {
	return func(m *SubdistrictMutation) {
		m.oldValue = func(context.Context) (*Subdistrict, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubdistrictMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubdistrictMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SubdistrictMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSubdistrict sets the subdistrict field.
func (m *SubdistrictMutation) SetSubdistrict(s string) {
	m.subdistrict = &s
}

// Subdistrict returns the subdistrict value in the mutation.
func (m *SubdistrictMutation) Subdistrict() (r string, exists bool) {
	v := m.subdistrict
	if v == nil {
		return
	}
	return *v, true
}

// OldSubdistrict returns the old subdistrict value of the Subdistrict.
// If the Subdistrict object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SubdistrictMutation) OldSubdistrict(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSubdistrict is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSubdistrict requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubdistrict: %w", err)
	}
	return oldValue.Subdistrict, nil
}

// ResetSubdistrict reset all changes of the "subdistrict" field.
func (m *SubdistrictMutation) ResetSubdistrict() {
	m.subdistrict = nil
}

// AddProvinceIDs adds the province edge to Province by ids.
func (m *SubdistrictMutation) AddProvinceIDs(ids ...int) {
	if m.province == nil {
		m.province = make(map[int]struct{})
	}
	for i := range ids {
		m.province[ids[i]] = struct{}{}
	}
}

// RemoveProvinceIDs removes the province edge to Province by ids.
func (m *SubdistrictMutation) RemoveProvinceIDs(ids ...int) {
	if m.removedprovince == nil {
		m.removedprovince = make(map[int]struct{})
	}
	for i := range ids {
		m.removedprovince[ids[i]] = struct{}{}
	}
}

// RemovedProvince returns the removed ids of province.
func (m *SubdistrictMutation) RemovedProvinceIDs() (ids []int) {
	for id := range m.removedprovince {
		ids = append(ids, id)
	}
	return
}

// ProvinceIDs returns the province ids in the mutation.
func (m *SubdistrictMutation) ProvinceIDs() (ids []int) {
	for id := range m.province {
		ids = append(ids, id)
	}
	return
}

// ResetProvince reset all changes of the "province" edge.
func (m *SubdistrictMutation) ResetProvince() {
	m.province = nil
	m.removedprovince = nil
}

// Op returns the operation name.
func (m *SubdistrictMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Subdistrict).
func (m *SubdistrictMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SubdistrictMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.subdistrict != nil {
		fields = append(fields, subdistrict.FieldSubdistrict)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SubdistrictMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subdistrict.FieldSubdistrict:
		return m.Subdistrict()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SubdistrictMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subdistrict.FieldSubdistrict:
		return m.OldSubdistrict(ctx)
	}
	return nil, fmt.Errorf("unknown Subdistrict field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SubdistrictMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subdistrict.FieldSubdistrict:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubdistrict(v)
		return nil
	}
	return fmt.Errorf("unknown Subdistrict field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SubdistrictMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SubdistrictMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SubdistrictMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Subdistrict numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SubdistrictMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SubdistrictMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubdistrictMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Subdistrict nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SubdistrictMutation) ResetField(name string) error {
	switch name {
	case subdistrict.FieldSubdistrict:
		m.ResetSubdistrict()
		return nil
	}
	return fmt.Errorf("unknown Subdistrict field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SubdistrictMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.province != nil {
		edges = append(edges, subdistrict.EdgeProvince)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SubdistrictMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subdistrict.EdgeProvince:
		ids := make([]ent.Value, 0, len(m.province))
		for id := range m.province {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SubdistrictMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedprovince != nil {
		edges = append(edges, subdistrict.EdgeProvince)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SubdistrictMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case subdistrict.EdgeProvince:
		ids := make([]ent.Value, 0, len(m.removedprovince))
		for id := range m.removedprovince {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SubdistrictMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SubdistrictMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SubdistrictMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Subdistrict unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SubdistrictMutation) ResetEdge(name string) error {
	switch name {
	case subdistrict.EdgeProvince:
		m.ResetProvince()
		return nil
	}
	return fmt.Errorf("unknown Subdistrict edge %s", name)
}
