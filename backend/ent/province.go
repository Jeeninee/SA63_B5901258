// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/oreo/app/ent/district"
	"github.com/oreo/app/ent/province"
	"github.com/oreo/app/ent/student"
	"github.com/oreo/app/ent/subdistrict"
)

// Province is the model entity for the Province schema.
type Province struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProvinceQuery when eager-loading is set.
	Edges       ProvinceEdges `json:"edges"`
	district    *int
	student     *int
	subdistrict *int
}

// ProvinceEdges holds the relations/edges for other nodes in the graph.
type ProvinceEdges struct {
	// District holds the value of the district edge.
	District *District
	// Subdistrict holds the value of the subdistrict edge.
	Subdistrict *Subdistrict
	// Student holds the value of the student edge.
	Student *Student
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DistrictOrErr returns the District value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvinceEdges) DistrictOrErr() (*District, error) {
	if e.loadedTypes[0] {
		if e.District == nil {
			// The edge district was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: district.Label}
		}
		return e.District, nil
	}
	return nil, &NotLoadedError{edge: "district"}
}

// SubdistrictOrErr returns the Subdistrict value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvinceEdges) SubdistrictOrErr() (*Subdistrict, error) {
	if e.loadedTypes[1] {
		if e.Subdistrict == nil {
			// The edge subdistrict was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: subdistrict.Label}
		}
		return e.Subdistrict, nil
	}
	return nil, &NotLoadedError{edge: "subdistrict"}
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProvinceEdges) StudentOrErr() (*Student, error) {
	if e.loadedTypes[2] {
		if e.Student == nil {
			// The edge student was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: student.Label}
		}
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Province) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Province) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // district
		&sql.NullInt64{}, // student
		&sql.NullInt64{}, // subdistrict
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Province fields.
func (pr *Province) assignValues(values ...interface{}) error {
	if m, n := len(values), len(province.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		pr.Name = value.String
	}
	values = values[1:]
	if len(values) == len(province.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field district", value)
		} else if value.Valid {
			pr.district = new(int)
			*pr.district = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field student", value)
		} else if value.Valid {
			pr.student = new(int)
			*pr.student = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field subdistrict", value)
		} else if value.Valid {
			pr.subdistrict = new(int)
			*pr.subdistrict = int(value.Int64)
		}
	}
	return nil
}

// QueryDistrict queries the district edge of the Province.
func (pr *Province) QueryDistrict() *DistrictQuery {
	return (&ProvinceClient{config: pr.config}).QueryDistrict(pr)
}

// QuerySubdistrict queries the subdistrict edge of the Province.
func (pr *Province) QuerySubdistrict() *SubdistrictQuery {
	return (&ProvinceClient{config: pr.config}).QuerySubdistrict(pr)
}

// QueryStudent queries the student edge of the Province.
func (pr *Province) QueryStudent() *StudentQuery {
	return (&ProvinceClient{config: pr.config}).QueryStudent(pr)
}

// Update returns a builder for updating this Province.
// Note that, you need to call Province.Unwrap() before calling this method, if this Province
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Province) Update() *ProvinceUpdateOne {
	return (&ProvinceClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Province) Unwrap() *Province {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Province is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Province) String() string {
	var builder strings.Builder
	builder.WriteString("Province(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Provinces is a parsable slice of Province.
type Provinces []*Province

func (pr Provinces) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
