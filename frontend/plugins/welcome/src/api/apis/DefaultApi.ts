/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersProvince,
    ControllersProvinceFromJSON,
    ControllersProvinceToJSON,
    EntDistrict,
    EntDistrictFromJSON,
    EntDistrictToJSON,
    EntProvince,
    EntProvinceFromJSON,
    EntProvinceToJSON,
    EntStudent,
    EntStudentFromJSON,
    EntStudentToJSON,
    EntSubdistrict,
    EntSubdistrictFromJSON,
    EntSubdistrictToJSON,
} from '../models';

export interface CreateDistrictRequest {
    resolution: EntDistrict;
}

export interface CreateProvinceRequest {
    province: ControllersProvince;
}

export interface CreateStudentRequest {
    student: EntStudent;
}

export interface CreateSubdistrictRequest {
    resolution: EntSubdistrict;
}

export interface GetDistrictRequest {
    id: number;
}

export interface GetStudentRequest {
    id: number;
}

export interface GetSubdistrictRequest {
    id: number;
}

export interface ListDistrictRequest {
    limit?: number;
    offset?: number;
}

export interface ListProvinceRequest {
    limit?: number;
    offset?: number;
}

export interface ListStudentRequest {
    limit?: number;
    offset?: number;
}

export interface ListSubdistrictRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create district
     * Create district
     */
    async createDistrictRaw(requestParameters: CreateDistrictRequest): Promise<runtime.ApiResponse<EntDistrict>> {
        if (requestParameters.resolution === null || requestParameters.resolution === undefined) {
            throw new runtime.RequiredError('resolution','Required parameter requestParameters.resolution was null or undefined when calling createDistrict.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/districts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDistrictToJSON(requestParameters.resolution),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDistrictFromJSON(jsonValue));
    }

    /**
     * Create district
     * Create district
     */
    async createDistrict(requestParameters: CreateDistrictRequest): Promise<EntDistrict> {
        const response = await this.createDistrictRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create province
     * Create province
     */
    async createProvinceRaw(requestParameters: CreateProvinceRequest): Promise<runtime.ApiResponse<EntProvince>> {
        if (requestParameters.province === null || requestParameters.province === undefined) {
            throw new runtime.RequiredError('province','Required parameter requestParameters.province was null or undefined when calling createProvince.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/provinces`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersProvinceToJSON(requestParameters.province),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProvinceFromJSON(jsonValue));
    }

    /**
     * Create province
     * Create province
     */
    async createProvince(requestParameters: CreateProvinceRequest): Promise<EntProvince> {
        const response = await this.createProvinceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create student
     * Create student
     */
    async createStudentRaw(requestParameters: CreateStudentRequest): Promise<runtime.ApiResponse<EntStudent>> {
        if (requestParameters.student === null || requestParameters.student === undefined) {
            throw new runtime.RequiredError('student','Required parameter requestParameters.student was null or undefined when calling createStudent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/students`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntStudentToJSON(requestParameters.student),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStudentFromJSON(jsonValue));
    }

    /**
     * Create student
     * Create student
     */
    async createStudent(requestParameters: CreateStudentRequest): Promise<EntStudent> {
        const response = await this.createStudentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create subdistrict
     * Create subdistrict
     */
    async createSubdistrictRaw(requestParameters: CreateSubdistrictRequest): Promise<runtime.ApiResponse<EntSubdistrict>> {
        if (requestParameters.resolution === null || requestParameters.resolution === undefined) {
            throw new runtime.RequiredError('resolution','Required parameter requestParameters.resolution was null or undefined when calling createSubdistrict.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/subdistricts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSubdistrictToJSON(requestParameters.resolution),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSubdistrictFromJSON(jsonValue));
    }

    /**
     * Create subdistrict
     * Create subdistrict
     */
    async createSubdistrict(requestParameters: CreateSubdistrictRequest): Promise<EntSubdistrict> {
        const response = await this.createSubdistrictRaw(requestParameters);
        return await response.value();
    }

    /**
     * get district by ID
     * Get a district entity by ID
     */
    async getDistrictRaw(requestParameters: GetDistrictRequest): Promise<runtime.ApiResponse<EntDistrict>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDistrict.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/districts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDistrictFromJSON(jsonValue));
    }

    /**
     * get district by ID
     * Get a district entity by ID
     */
    async getDistrict(requestParameters: GetDistrictRequest): Promise<EntDistrict> {
        const response = await this.getDistrictRaw(requestParameters);
        return await response.value();
    }

    /**
     * get student by ID
     * Get a student entity by ID
     */
    async getStudentRaw(requestParameters: GetStudentRequest): Promise<runtime.ApiResponse<EntStudent>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStudent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/students/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStudentFromJSON(jsonValue));
    }

    /**
     * get student by ID
     * Get a student entity by ID
     */
    async getStudent(requestParameters: GetStudentRequest): Promise<EntStudent> {
        const response = await this.getStudentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get subdistrict by ID
     * Get a subdistrict entity by ID
     */
    async getSubdistrictRaw(requestParameters: GetSubdistrictRequest): Promise<runtime.ApiResponse<EntSubdistrict>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSubdistrict.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subdistricts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSubdistrictFromJSON(jsonValue));
    }

    /**
     * get subdistrict by ID
     * Get a subdistrict entity by ID
     */
    async getSubdistrict(requestParameters: GetSubdistrictRequest): Promise<EntSubdistrict> {
        const response = await this.getSubdistrictRaw(requestParameters);
        return await response.value();
    }

    /**
     * list district entities
     * List district entities
     */
    async listDistrictRaw(requestParameters: ListDistrictRequest): Promise<runtime.ApiResponse<Array<EntDistrict>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/districts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDistrictFromJSON));
    }

    /**
     * list district entities
     * List district entities
     */
    async listDistrict(requestParameters: ListDistrictRequest): Promise<Array<EntDistrict>> {
        const response = await this.listDistrictRaw(requestParameters);
        return await response.value();
    }

    /**
     * list province entities
     * List province entities
     */
    async listProvinceRaw(requestParameters: ListProvinceRequest): Promise<runtime.ApiResponse<Array<EntProvince>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/provinces`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntProvinceFromJSON));
    }

    /**
     * list province entities
     * List province entities
     */
    async listProvince(requestParameters: ListProvinceRequest): Promise<Array<EntProvince>> {
        const response = await this.listProvinceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list student entities
     * List student entities
     */
    async listStudentRaw(requestParameters: ListStudentRequest): Promise<runtime.ApiResponse<Array<EntStudent>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/students`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStudentFromJSON));
    }

    /**
     * list student entities
     * List student entities
     */
    async listStudent(requestParameters: ListStudentRequest): Promise<Array<EntStudent>> {
        const response = await this.listStudentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list subdistrict entities
     * List subdistrict entities
     */
    async listSubdistrictRaw(requestParameters: ListSubdistrictRequest): Promise<runtime.ApiResponse<Array<EntSubdistrict>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subdistricts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSubdistrictFromJSON));
    }

    /**
     * list subdistrict entities
     * List subdistrict entities
     */
    async listSubdistrict(requestParameters: ListSubdistrictRequest): Promise<Array<EntSubdistrict>> {
        const response = await this.listSubdistrictRaw(requestParameters);
        return await response.value();
    }

}
